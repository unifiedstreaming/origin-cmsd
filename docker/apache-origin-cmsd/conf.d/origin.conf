# builtin modules
LoadModule ssl_module modules/mod_ssl.so
# Mods for unique id generation, special log format and rewrite rules
LoadModule unique_id_module modules/mod_unique_id.so
LoadModule logio_module modules/mod_logio.so
LoadModule rewrite_module modules/mod_rewrite.so

<IfDefine !TestRoot>
  Define TestRoot "/var/www/origin"
  # CMSD Entity Identifier (n)
  Define ServerNameCMSD "USP-123"
  Define VoDAssets "/tos/targets/"
</IfDefine>

ServerName origin

LogFormat '${LOG_FORMAT}' log_format

# Origin virtualhost
<VirtualHost 0.0.0.0:81>

</VirtualHost>

<VirtualHost 0.0.0.0:80>
  # don't log kubernetes probes
  SetEnvIf User-Agent "kube-probe" dontlog
  CustomLog /dev/stdout log_format
  ErrorLog /dev/stderr
  
  LogLevel ${LOG_LEVEL}
  SSLProxyEngine on

  DocumentRoot ${TestRoot}

  Header setifempty X-Request-ID %{UNIQUE_ID}e


  # Add Cache headers for Manifest and Media playlist
  <LocationMatch "(\.mpd|\.m3u8|Manifest)$">
    Header setifempty Cache-Control "max-age=2"
  </LocationMatch>

  <LocationMatch "(\.dash|\.m4s|\.ts)$">
    Header setifempty Cache-Control "max-age=300"
  </LocationMatch>

  # CMSD Timestamp (t)#NOTE: Timestamp is currently set as integer instead of 
  # a string btween double quotes  
  Header merge CMSD-Dynamic "%{msec}t"
  # Perhaps this has to be generated by the Client and not the Origin
  # CMSD Entity Identifier (n) and Request ID
  Header merge CMSD-Dynamic "n=\"${ServerNameCMSD}\""
  # NOTE: The header etp and rtt values are only synthetic data for testing
  # purpouses
  Header merge CMSD-Dynamic "etp=XXXX"
  Header merge CMSD-Dynamic "rtt=XXXX"

  # We set the Request Id (rid) in case the intermediate server did not set it
  # Header setifempty CMSD-Static rid="%{UNIQUE_ID}e"
  
  # CMSD stream type (st) NOTE: We are aware of it
  # ONLY becasue of the static content (VoD) in this project
  <LocationMatch ${VoDAssets}>
    # VoD static files are located in folder: '/tos/targets/'
    Header merge CMSD-Static "st=v"
  </LocationMatch>

  # CMSD object type (ot)
  Header merge CMSD-Static ot=m "expr=%{REQUEST_URI} =~ m#^/.*mpd$#"
  Header merge CMSD-Static ot=a "expr=%{REQUEST_URI} =~ m#^/.*-audio_.*.[dash|m4s]$#"
  Header merge CMSD-Static ot=v "expr=%{REQUEST_URI} =~ m#^/.*-video_.*.[dash|m4s]$#"
  Header merge CMSD-Static ot=c "expr=%{REQUEST_URI} =~ m#^/.*-textstream_.*.[dash|m4s]$#"
  # We consdider only init segments for SegmentTemplate (.*.dash)
  Header merge CMSD-Static ot=i "expr=%{REQUEST_URI} =~ m#^/.*-[audio|video|textstream]+_[a-z]+=[0-9]+.dash$#"

  # Streaming format (sf)
  Header merge CMSD-Static sf=d "expr=%{REQUEST_URI} =~ m#^/.*.[dash|mpd]$#"
  # For the load of CMSD we could use one of the following
  Header set CMSD-Load "load=%l, idle=%i%%, busy=%b%%"

  # Add encoded bitarate based on %{REQUEST_URI} and only set the VENCODE var 
  # when is presenetd in the REQUEST_URI variable
  RewriteEngine  on
  RewriteRule ^/.*-[audio|video]+_[a-z]+=([0-9]+).* %{REQUEST_URI} [E=VENCODE:$1]
  Header merge CMSD-Static "br=%{VENCODE}e" "expr=%{REQUEST_URI} =~ m#^/.*-[audio|video]+_[a-z]+=[0-9]+.*$#"

  # Replace CMSD's response headers from comma Unicode 0x2C with semi-colon 
  # Unicode  0x3B to separate each key-value pair. It assumes that this Origin
  # is the first intermediate server generating CMSD Header responses.
  # Otherwise, it will replace other incoming server CMSD Headers.
  <LocationMatch ".*$">
    Header edit* CMSD-Static , ;
  </LocationMatch>
  Header edit* CMSD-Dynamic , ;

  # Added the required Headers for the player
  Header set Access-Control-Allow-Headers "origin, range"
  Header set Access-Control-Allow-Methods "GET, HEAD, OPTIONS"
  Header set Access-Control-Allow-Origin "*"
  Header set Access-Control-Expose-Headers "Server,range"


</VirtualHost>

<Directory ${TestRoot}>
  Require all granted
</Directory>
